type: edu
files:
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    import java.util.List;

    import static org.junit.Assert.assertEquals;
    import static org.junit.Assert.fail;

    public class Tests {
        @Test
        public void testSolution() {
            Lista l = new Lista();

            try {
                assertEquals("osszegetSzamol hibas", 0, l.osszegetSzamol(new Tomb()));
                assertEquals("runtimeExceptionDarab hibas", 1, l.runtimeExceptionDarab());

                assertEquals("osszegetSzamol hibas", 0, l.osszegetSzamol(new Tomb(new int[]{3, 5, 7})));
                assertEquals("runtimeExceptionDarab hibas", 2, l.runtimeExceptionDarab());

                assertEquals("szetfoszlik hibas", 0, l.szetfoszlat(new Tomb()), 0.0001);
                assertEquals("runtimeExceptionDarab hibas", 3, l.runtimeExceptionDarab());

                assertEquals("szetfoszlik hibas", 0.1, l.szetfoszlat(new Tomb(new int[] {3, 2, 5})), 0.0001);
                assertEquals("runtimeExceptionDarab hibas", 3, l.runtimeExceptionDarab());

                assertEquals("szetfoszlik hibas", 0, l.szetfoszlat(new Tomb(new int[] {2, 4, 0, 5, 7})), 0.0001);
                assertEquals("runtimeExceptionDarab hibas", 3, l.runtimeExceptionDarab());

                assertEquals("szetfoszlik hibas", 0.1333333, l.szetfoszlat(new Tomb(new int[] {3, 2, 5})), 0.0001);
                assertEquals("runtimeExceptionDarab hibas", 3, l.runtimeExceptionDarab());

                l.beilleszt("5,3,5", new Tomb(new int[] {2, 4, 6}));
                assertEquals("runtimeExceptionDarab hibas", 3, l.runtimeExceptionDarab());

                l.beilleszt("macska,5,7", new Tomb(new int[] {2, 4, 6}));
                assertEquals("runtimeExceptionDarab hibas", 4, l.runtimeExceptionDarab());
            } catch (Exception e) {
                fail("Nem kellett volna kivetelt dobni!");
            }
        }
    }
  learner_created: false
- name: src/Lista.java
  visible: true
  placeholders:
  - offset: 177
    length: 9
    placeholder_text: return 0;
    initial_state:
      length: 9
      offset: 177
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      try {
                  return t.osszeg();
              } catch (Exception e) {
                  lista.add(e);
                  return 0;
              }
  - offset: 242
    length: 9
    placeholder_text: return 0;
    initial_state:
      length: 9
      offset: 242
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      try {
                  return t.szetfoszlik(lista.size());
              } catch (Exception e) {
                  lista.add(e);
                  return 0;
              }
  - offset: 313
    length: 11
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 313
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      try {
                  t.beilleszt(s);
              } catch (Exception e) {
                  lista.add(e);
              }
  - offset: 381
    length: 9
    placeholder_text: return 0;
    initial_state:
      length: 9
      offset: 381
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      int db = 0;
              for (Exception e: lista) {
                  if (e instanceof RuntimeException) {
                      db++;
                  }
              }

              return db;
  text: |-
    import java.util.ArrayList;
    import java.util.List;

    public class Lista {
        private List<Exception> lista = new ArrayList<>();

        public int osszegetSzamol(Tomb t) {
            return 0;
        }

        public double szetfoszlat(Tomb t) {
            return 0;
        }

        public void beilleszt(String s, Tomb t) {
            // megoldas
        }

        public int runtimeExceptionDarab() {
            return 0;
        }

    }
  learner_created: false
- name: src/Tomb.java
  visible: true
  text: |
    import com.google.gson.Gson;

    public class Tomb {
        int[] tomb;

        public Tomb(int[] tomb) {
            this.tomb = tomb;
        }

        public Tomb() {}

        public int osszeg() {
            int osszeg = 0;
            for (int i = 0; i <= tomb.length; i++) {
                osszeg += tomb[i];
            }
            return osszeg;
        }

        public double szetfoszlik(int alap) throws Exception {
            double eredmeny = alap;

            for (int value : tomb) {
                eredmeny /= value;
            }

            if (eredmeny == Double.POSITIVE_INFINITY) {
                throw new Exception("NEMAR!");
            }

            return eredmeny;
        }

        public void beilleszt(String szoveg) {
            String[] darabok = szoveg.split(",");
            for (int i = 0; i < darabok.length; i++) {
                tomb[i] = Integer.parseInt(darabok[i]);
            }
        }

    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
