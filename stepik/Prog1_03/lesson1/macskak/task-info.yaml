type: edu
files:
- name: src/Macska.java
  visible: true
  text: |-
    public class Macska {
        String szin;
        int etelIgeny;
    }
  learner_created: false
- name: src/Etetes.java
  visible: true
  placeholders:
  - offset: 0
    length: 9
    placeholder_text: // megoldas
    initial_state:
      length: 9
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      public class Etetes {
          // megnezi, hogy minden macska meg van-e etetve
          static boolean megetetve(Macska[] macskak, int darabszam) {
              for (int i = 0; i < darabszam; i++) {
                  if (macskak[i].etelIgeny != 0) {
                      return false;
                  }
              }

              return true;
          }

          // megetet nehany macskat
          static void megetet(Macska[] macskak, int[] etetendoMacskak, int etetendoMacskakDarabszam) {
              if (etetendoMacskak == null) {
                  return;
              }

              for (int i = 0; i < etetendoMacskakDarabszam; i++) {
                  macskak[etetendoMacskak[i]].etelIgeny = 0;
              }
          }

          // n alatt a k
          static int CNK(int n, int k) {
              float eredmeny = 1;
              for (int i = 1; i <= k; i++) {
                  eredmeny *= ((n + 1 - i) / (double) i);
              }

              return (int) Math.ceil(eredmeny);
          }

          // korrigalja a tombot, ha tul nagy ertekek vannak benne
          static boolean tombKorrigalas(int[] tomb, int meret, int max) {
              for (int i = meret - 1; i >= 0; i--) {
                  if (tomb[i] < max + (i - meret)) {
                      tomb[i]++;

                      for (int j = i + 1; j < meret; j++) {
                          tomb[j] = tomb[j-1] + 1;
                      }

                      return true;
                  }
              }

              return false;
          }

          // kivalaszt egy opciot
          static int[][] opcioLegeneralas(int darabszam, int kivalasztottSzam) {
              if (kivalasztottSzam > darabszam) {
                  return null;
              }

              int db = CNK(darabszam, kivalasztottSzam);
              int[][] tomb = new int[db + 10][];

              for (int i = 0; i < db + 10; i++) {
                  tomb[i] = null;
              }

              int pos = 1;
              int[] start = new int[kivalasztottSzam];
              for (int i = 0; i < kivalasztottSzam; i++) {
                  start[i] = i;
              }

              tomb[0] = start;
              while (true) {
                  int[] kistomb = new int[kivalasztottSzam];

                  for (int i = 0; i < kivalasztottSzam; i++) {
                      kistomb[i] = tomb[pos-1][i];
                  }

                  kistomb[kivalasztottSzam - 1]++;

                  for (int i = 0; i < kivalasztottSzam; i++) {
                      if (kistomb[i] >= darabszam) {
                          boolean ret = tombKorrigalas(kistomb, kivalasztottSzam, darabszam);
                          if (!ret) {
                              return tomb;
                          }
                      }
                  }

                  tomb[pos] = kistomb;
                  pos++;
              }
          }

          static int[] opciokatKivalaszt(Macska[] macskak, int[][] opciok, int kivalasztottSzam, int szuksegesOsszeg, String szin) {
              for (int i = 0; opciok[i] != null; i++) {
                  int osszeg = 0;
                  for (int j = 0; j < kivalasztottSzam; j++) {
                      if (!macskak[opciok[i][j]].szin.equals(szin)) {
                          osszeg = 0;
                          break;
                      }

                      osszeg += macskak[opciok[i][j]].etelIgeny;
                  }

                  if (osszeg == szuksegesOsszeg) {
                      return opciok[i];
                  }
              }

              return null;
          }

          static int[] vizsgalat(Macska[] macskak, int darabszam, int etetendoMacskakSzama, String macskaSzin, int osszEtel) {
              int[][] opciok = opcioLegeneralas(darabszam, etetendoMacskakSzama);
              int[] etetesAdat = opciokatKivalaszt(macskak, opciok, etetendoMacskakSzama, osszEtel, macskaSzin);
              return etetesAdat;
          }

          static int etetes(Macska[] macskak, int darabszam) {
              int etetesAlkalom = 0;

              int egyszerreEtetett = 1;
              int etetesMennyiseg = 10;
              while (!megetetve(macskak, darabszam)) {
                  for (int i = 0; i < darabszam; i++) {
                      if (macskak[i].etelIgeny == 0) {
                          continue;
                      }

                      int[] eredmeny = vizsgalat(macskak, darabszam, egyszerreEtetett, macskak[i].szin, etetesMennyiseg);

                      if (eredmeny != null) {
                          megetet(macskak, eredmeny, egyszerreEtetett);
                          etetesAlkalom++;
                      }
                  }

                  egyszerreEtetett++;
                  if (egyszerreEtetett > 10 || egyszerreEtetett > darabszam) {
                      egyszerreEtetett = 1;
                      etetesMennyiseg--;
                  }

              }

              return etetesAlkalom;
          }
      }
  - offset: 0
    length: 9
    placeholder_text: return 0;
    initial_state:
      length: 9
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: // megoldas
  text: return 0;
  learner_created: false
- name: test/TestHelper.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class TestHelper {
        public Macska createMacska(String a, int b) {
            Macska m = new Macska();
            m.szin = a;
            m.etelIgeny = b;
            return m;
        }
    }
  learner_created: false
- name: test/Alapeset.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class Alapeset extends TestHelper {
        @Test
        public void teszt_01() {
            Macska[] macskak = {
                    createMacska("szurke", 5),
                    createMacska("szurke", 5),
                    createMacska("szurke", 7),
                    createMacska("szurke", 3)
            };

            assertEquals(2, Etetes.etetes(macskak, 4));
        }

        @Test
        public void teszt_02() {
            Macska[] macskak2 = {
                    createMacska("barna", 10),
                    createMacska("barna", 3),
                    createMacska("barna", 3),
                    createMacska("barna", 4)
            };

            assertEquals(2, Etetes.etetes(macskak2, 4));
        }
    }
  learner_created: false
- name: test/EgyszinuRandom.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class EgyszinuRandom extends TestHelper {
        @Test
        public void teszt_01() {
            Macska[] macskak = {
                    createMacska("fekete", 3),
                    createMacska("fekete", 5),
                    createMacska("fekete", 7),
                    createMacska("fekete", 5)
            };

            assertEquals(2, Etetes.etetes(macskak, 4));
        }

        @Test
        public void teszt_02() {
            Macska[] macskak2 = {
                    createMacska("narancssarga", 9),
                    createMacska("narancssarga", 5),
                    createMacska("narancssarga", 1),
                    createMacska("narancssarga", 2),
                    createMacska("narancssarga", 4),
                    createMacska("narancssarga", 5),
                    createMacska("narancssarga", 1),
                    createMacska("narancssarga", 3)
            };

            assertEquals(3, Etetes.etetes(macskak2, 8));
        }
    }
  learner_created: false
- name: test/TobbszinuEgyszeru.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class TobbszinuEgyszeru extends TestHelper {
        @Test
        public void teszt_01() {
            Macska[] macskak = {
                    createMacska("fekete", 3),
                    createMacska("szurke", 5),
                    createMacska("fekete", 7),
                    createMacska("szurke", 5)
            };

            assertEquals(2, Etetes.etetes(macskak, 4));
        }

        @Test
        public void teszt_02() {
            Macska[] macskak3 = {
                    createMacska("barna", 4),
                    createMacska("narancs", 3),
                    createMacska("rozsaszin", 5),
                    createMacska("piros", 4),
                    createMacska("kek", 3),
                    createMacska("szurke", 1),
                    createMacska("feher", 1),
                    createMacska("fekete", 2),
                    createMacska("bordo", 4),
                    createMacska("sarga", 2),
                    createMacska("hatilyenszines", 3),
                    createMacska("tobbszinu", 1)
            };

            assertEquals(12, Etetes.etetes(macskak3, 12));
        }
    }
  learner_created: false
- name: test/TobbszinuRandomsorrend.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class TobbszinuRandomsorrend extends TestHelper {
        @Test
        public void teszt_01() {
            Macska[] macskak = {
                    createMacska("fekete", 2),
                    createMacska("szurke", 5),
                    createMacska("fekete", 6),
                    createMacska("szurke", 5),
                    createMacska("szurke", 5),
                    createMacska("fekete", 8),
                    createMacska("szurke", 5),
                    createMacska("fekete", 4)
            };

            assertEquals(4, Etetes.etetes(macskak, 8));
        }
    }
  learner_created: false
- name: test/EgyszinuNemoptimalis.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class EgyszinuNemoptimalis extends TestHelper {
        @Test
        public void teszt_01() {
            Macska[] macskak0 = {
                    createMacska("szurke", 8)
            };

            assertEquals(1, Etetes.etetes(macskak0, 1));
        }

        @Test
        public void teszt_02() {
            Macska[] macskak1 = {
                    createMacska("szurke", 2),
                    createMacska("szurke", 2),
                    createMacska("szurke", 2),
                    createMacska("szurke", 2),
                    createMacska("szurke", 2)
            };

            assertEquals(1, Etetes.etetes(macskak1, 5));
        }

        @Test
        public void teszt_03() {
            Macska[]macskak = {
                    createMacska("szurke", 2),
                    createMacska("szurke", 7),
                    createMacska("szurke", 4),
                    createMacska("szurke", 5)
            };

            assertEquals(2, Etetes.etetes(macskak, 4));
        }

        @Test
        public void teszt_04() {
            Macska[] macskak2 = {
                    createMacska("szurke", 2),
                    createMacska("szurke", 6),
                    createMacska("szurke", 9),
                    createMacska("szurke", 2)
            };

            assertEquals(2, Etetes.etetes(macskak2, 4));
        }
    }
  learner_created: false
- name: test/TobbszinuBonyolult.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class TobbszinuBonyolult extends TestHelper {
        @Test
        public void teszt_01() {
            Macska[] macskak0 = {
                    createMacska("fekete", 3),
                    createMacska("szurke", 5),
                    createMacska("fekete", 5),
                    createMacska("szurke", 7)
            };

            assertEquals(3, Etetes.etetes(macskak0, 4));
        }

        @Test
        public void teszt_02() {
            Macska[] macskak = {
                    createMacska("szurke", 2),
                    createMacska("szurke", 9),
                    createMacska("fekete", 4),
                    createMacska("feher", 1),
                    createMacska("fekete", 5),
                    createMacska("fekete", 7),
                    createMacska("fekete", 1),
                    createMacska("szurke", 1)
            };

            assertEquals(5, Etetes.etetes(macskak, 8));
        }

        @Test
        public void teszt_03() {
            Macska[] macskak2 = {
                    createMacska("barna", 4),
                    createMacska("szurke", 3),
                    createMacska("feher", 5),
                    createMacska("szurke", 4),
                    createMacska("szurke", 3),
                    createMacska("szurke", 1),
                    createMacska("feher", 1),
                    createMacska("szurke", 2),
                    createMacska("barna", 4),
                    createMacska("szurke", 2),
                    createMacska("barna", 3),
                    createMacska("barna", 1)
            };

            assertEquals(5, Etetes.etetes(macskak2, 12));
        }

        @Test
        public void teszt_04() {
            Macska[] macskak3 = {
                    createMacska("barna", 8),
                    createMacska("szurke", 3),
                    createMacska("feher", 4),
                    createMacska("szurke", 2),
                    createMacska("szurke", 7),
                    createMacska("narancssarga", 6),
                    createMacska("feher", 10),
                    createMacska("szurke", 9),
                    createMacska("narancssarga", 8),
                    createMacska("barna", 6),
                    createMacska("feher", 5),
                    createMacska("barna", 5)
            };

            assertEquals(10, Etetes.etetes(macskak3, 12));
        }
    }
  learner_created: false
- name: test/TobbszinuLegbonyolultabb.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class TobbszinuLegbonyolultabb extends TestHelper {
        @Test
        public void teszt_01() {
            Macska[] macskak00 = {
                    createMacska("szurke", 5),
                    createMacska("kek", 7),
                    createMacska("szurke", 3),
                    createMacska("szurke", 3),
                    createMacska("kek", 8),
                    createMacska("szurke", 4),
                    createMacska("szurke", 3),
                    createMacska("kek", 6),
                    createMacska("szurke", 2),
                    createMacska("fekete", 5),
                    createMacska("kek", 9),
                    createMacska("fekete", 5),
                    createMacska("kek", 6),
            };

            assertEquals(8, Etetes.etetes(macskak00, 13));
        }

        @Test
        public void teszt_02() {
            Macska[] macskak0 = {
                    createMacska("zold", 2),
                    createMacska("zold", 4),
                    createMacska("fekete", 3),
                    createMacska("zold", 2),
                    createMacska("fekete", 3),
                    createMacska("zold", 2),
                    createMacska("fekete", 4),
                    createMacska("fekete", 4),
                    createMacska("zold", 5),
                    createMacska("fekete", 3),
                    createMacska("zold", 3),
                    createMacska("fekete", 3),
                    createMacska("zold", 2)
            };

            assertEquals(4, Etetes.etetes(macskak0, 13));
        }

        @Test
        public void teszt_03() {
            Macska[] macskak = {
                    createMacska("fekete", 7),
                    createMacska("feher", 4),
                    createMacska("feher", 4),
                    createMacska("fekete", 3),
                    createMacska("feher", 4),
                    createMacska("feher", 3),
                    createMacska("feher", 4),
                    createMacska("fekete", 8),
                    createMacska("feher", 3),
                    createMacska("feher", 3),
                    createMacska("feher", 2),
                    createMacska("feher", 3),
                    createMacska("fekete", 2),
            };

            assertEquals(5, Etetes.etetes(macskak, 13));
        }

        @Test
        public void teszt_04() {
            Macska[] macskak1 = {
                    createMacska("feher", 5),
                    createMacska("feher", 3),
                    createMacska("feher", 2),
                    createMacska("feher", 4),
                    createMacska("feher", 4),
                    createMacska("feher", 2),
            };

            assertEquals(2, Etetes.etetes(macskak1, 6));
        }

        @Test
        public void teszt_05() {
            Macska[] macskak2 = {
                    createMacska("barna", 5),
                    createMacska("barna", 4),
                    createMacska("barna", 3),
                    createMacska("barna", 2),
                    createMacska("barna", 6),
            };

            assertEquals(2, Etetes.etetes(macskak2, 5));
        }

        @Test
        public void teszt_06() {
            Macska[] macskak3 = {
                    createMacska("barna", 4),
                    createMacska("barna", 4),
                    createMacska("barna", 3),
                    createMacska("barna", 3),
                    createMacska("barna", 3),
                    createMacska("barna", 3),
            };

            assertEquals(2, Etetes.etetes(macskak3, 6));
        }
    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
