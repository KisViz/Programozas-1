type: edu
files:
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    import static org.junit.Assert.*;

    public class Tests {
        @Test
        public void teszt() {
            Gyumolcs a1 = new Alma(5, "piros");
            Gyumolcs a2 = new Alma(7, "kek");
            Gyumolcs e1 = new Eper(7, "piros");
            Gyumolcs m1 = new Malna(2, "zold");
            Gyumolcs m2 = new Malna(8, "rozsaszin");
            Gyumolcs p1 = new Paradicsom(10, "lila");

            Gyumolcskosar kosar = new Gyumolcskosar(3);

            assertEquals("gyumolcsSzam hibas", 0, kosar.gyumolcsSzam());

            boolean res = kosar.gyumolcsotHozzaad(a1);
            assertTrue("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertNull("gyumolcsotHozzaad nem jol mukodik", kosar.getGyumolcsok()[1]);
            assertNull("gyumolcsotHozzaad nem jol mukodik", kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 1, kosar.gyumolcsSzam());

            res = kosar.gyumolcsotHozzaad(e1);
            assertTrue("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", e1, kosar.getGyumolcsok()[1]);
            assertNull("gyumolcsotHozzaad nem jol mukodik", kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 2, kosar.gyumolcsSzam());

            res = kosar.gyumolcsotHozzaad(a1);
            assertFalse("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", e1, kosar.getGyumolcsok()[1]);
            assertNull("gyumolcsotHozzaad nem jol mukodik", kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 2, kosar.gyumolcsSzam());

            res = kosar.gyumolcsotHozzaad(a2);
            assertFalse("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", e1, kosar.getGyumolcsok()[1]);
            assertNull("gyumolcsotHozzaad nem jol mukodik", kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 2, kosar.gyumolcsSzam());

            res = kosar.gyumolcsotHozzaad(m1);
            assertTrue("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", e1, kosar.getGyumolcsok()[1]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", m1, kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 3, kosar.gyumolcsSzam());

            res = kosar.gyumolcsotHozzaad(m1);
            assertFalse("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", e1, kosar.getGyumolcsok()[1]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", m1, kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 3, kosar.gyumolcsSzam());

            res = kosar.gyumolcsotHozzaad(m2);
            assertFalse("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", e1, kosar.getGyumolcsok()[1]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", m1, kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 3, kosar.gyumolcsSzam());

            res = kosar.gyumolcsotHozzaad(p1);
            assertFalse("gyumolcsotHozzaad nem jol mukodik", res);
            assertSame("gyumolcsotHozzaad nem jol mukodik", a1, kosar.getGyumolcsok()[0]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", e1, kosar.getGyumolcsok()[1]);
            assertSame("gyumolcsotHozzaad nem jol mukodik", m1, kosar.getGyumolcsok()[2]);
            assertEquals("gyumolcsSzam hibas", 3, kosar.gyumolcsSzam());
        }
    }
  learner_created: false
- name: src/Gyumolcskosar.java
  visible: true
  placeholders:
  - offset: 155
    length: 1248
    placeholder_text: // megoldasok
    initial_state:
      length: 13
      offset: 155
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |2-
       public boolean gyumolcsotHozzaad(Gyumolcs gyumolcs) {
              int i;
              for (i = 0; i < gyumolcsok.length; i++) {
                  if (gyumolcsok[i] != null) {
                      if (gyumolcsok[i].getClass() == gyumolcs.getClass()) {
                          return false;
                      }
                  } else {
                      break;
                  }
              }

              if (i >= gyumolcsok.length) {
                  return false;
              }

              gyumolcsok[i] = gyumolcs;
              return true;
          }

          public Gyumolcs[] getGyumolcsok() {
              return gyumolcsok;
          }

          public int gyumolcsSzam() {
              int count = 0;
              for (Gyumolcs gy: gyumolcsok) {
                  if (gy != null) {
                      count++;
                  }
              }

              return count;
          }
  text: |-
    public class Gyumolcskosar {
        private Gyumolcs[] gyumolcsok;

        public Gyumolcskosar(int meret) {
            gyumolcsok = new Gyumolcs[meret];
        }

       // megoldasok

    }
  learner_created: false
- name: src/Gyumolcs.java
  visible: true
  text: |
    public abstract class Gyumolcs {
        protected int meret;
        protected String szin;

        public Gyumolcs(int meret, String szin) {
            this.meret = meret;
            this.szin = szin;
        }

    }
  learner_created: false
- name: src/Eper.java
  visible: true
  text: |
    public class Eper extends Gyumolcs {
        public Eper(int meret, String szin) {
            super(meret, szin);
        }
    }
  learner_created: false
- name: src/Malna.java
  visible: true
  text: |
    public class Malna extends Gyumolcs {
        public Malna(int meret, String szin) {
            super(meret, szin);
        }
    }
  learner_created: false
- name: src/Paradicsom.java
  visible: true
  text: |
    public class Paradicsom extends Gyumolcs {
        public Paradicsom(int meret, String szin) {
            super(meret, szin);
        }
    }
  learner_created: false
- name: src/Alma.java
  visible: true
  text: |
    public class Alma extends Gyumolcs {
        public Alma(int meret, String szin) {
            super(meret, szin);
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 13 Apr 2024 13:24:43 UTC"
record: -1
solution_hidden: true
