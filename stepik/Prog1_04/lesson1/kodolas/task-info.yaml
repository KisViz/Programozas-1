type: edu
files:
- name: src/Titok.java
  visible: true
  placeholders:
  - offset: 73
    length: 10
    placeholder_text: return "";
    initial_state:
      length: 10
      offset: 73
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: return eredeti + eredeti + eredeti;
  - offset: 144
    length: 10
    placeholder_text: return "";
    initial_state:
      length: 10
      offset: 144
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      String s1 = kodolt.substring(0, kodolt.length() / 3);
              String s2 = kodolt.substring(kodolt.length() / 3, kodolt.length() * 2 / 3);
              String s3 = kodolt.substring(kodolt.length() * 2 / 3);

              StringBuilder dekodolt = new StringBuilder();
              for (int i = 0; i < s1.length(); i++) {
                  int bit1 = s1.charAt(i) - '0';
                  int bit2 = s2.charAt(i) - '0';
                  int bit3 = s3.charAt(i) - '0';

                  char helyesBit;
                  if (bit1 + bit2 + bit3 >= 2) {
                      helyesBit = '1';
                  } else {
                      helyesBit = '0';
                  }

                  dekodolt.append(helyesBit);
              }


              return dekodolt.toString();
  text: |-
    public class Titok {
        static String kodolas(String eredeti) {
            return "";
        }

        static String dekodolas(String kodolt) {
            return "";
        }

    }
  learner_created: false
- name: test/NincsHiba.java
  visible: false
  text: |
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class NincsHiba {
        @Test
        public void teszt_01() {
            String eredeti = "1100";
            String kodolt = Titok.kodolas(eredeti);
            String dekodolt = Titok.dekodolas(kodolt);
            assertEquals("Hibas eredmeny", eredeti, dekodolt);
        }

        @Test
        public void teszt_02() {
            String eredeti = "111100010101";
            String kodolt = Titok.kodolas(eredeti);
            String dekodolt = Titok.dekodolas(kodolt);
            assertEquals("Hibas eredmeny", eredeti, dekodolt);
        }
    }
  learner_created: false
- name: test/VanHiba.java
  visible: false
  text: |-
    import org.junit.Test;

    import java.util.Random;

    import static org.junit.Assert.assertEquals;

    public class VanHiba {
        @Test
        public void teszt_01() {
            Random random = new Random();
            String eredeti = "1100";
            String kodolt = Titok.kodolas(eredeti);

            int pozicio = random.nextInt(kodolt.length());
            kodolt = kodolt.substring(0, pozicio) + (kodolt.charAt(pozicio) == '1' ? '0' : '1') + kodolt.substring(pozicio + 1);

            String dekodolt = Titok.dekodolas(kodolt);
            assertEquals("Hibas eredmeny", eredeti, dekodolt);
        }

        @Test
        public void teszt_02() {
            Random random = new Random();

            String eredeti = "111100010101";
            String kodolt = Titok.kodolas(eredeti);

            int pozicio = random.nextInt(kodolt.length());
            kodolt = kodolt.substring(0, pozicio) + (kodolt.charAt(pozicio) == '1' ? '0' : '1') + kodolt.substring(pozicio + 1);

            String dekodolt = Titok.dekodolas(kodolt);
            assertEquals("Hibas eredmeny", eredeti, dekodolt);
        }

        @Test
        public void teszt_03() {
            for (int i = 0; i < 10000; i++) {
                Random random = new Random();

                StringBuilder eredeti = new StringBuilder();
                int hossz = random.nextInt(250) + 1;
                for (int j = 0; j < hossz; j++) {
                    eredeti.append((random.nextBoolean()) ? '1' : '0');
                }

                String kodolt = Titok.kodolas(eredeti.toString());

                int pozicio = random.nextInt(kodolt.length());
                kodolt = kodolt.substring(0, pozicio) + (kodolt.charAt(pozicio) == '1' ? '0' : '1') + kodolt.substring(pozicio + 1);

                String dekodolt = Titok.dekodolas(kodolt);
                assertEquals("Hibas eredmeny", eredeti.toString(), dekodolt);
            }
        }
    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
